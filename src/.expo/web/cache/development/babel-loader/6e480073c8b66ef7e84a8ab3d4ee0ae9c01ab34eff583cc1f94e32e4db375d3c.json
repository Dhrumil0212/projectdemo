{"ast":null,"code":"import * as Systrace from '../Performance/Systrace';\nimport Performance from '../WebPerformance/Performance';\nimport infoLog from './infoLog';\nconst _cookies = {};\nconst PRINT_TO_CONSOLE = false;\nconst WEB_PERFORMANCE_PREFIX = 'global_perf_';\nconst performance = new Performance();\nexport const getCurrentTimestamp = global.nativeQPLTimestamp ?? global.performance.now.bind(global.performance);\nclass PerformanceLogger {\n  _timespans = {};\n  _extras = {};\n  _points = {};\n  _pointExtras = {};\n  _closed = false;\n  _isLoggingForWebPerformance = false;\n  constructor(isLoggingForWebPerformance) {\n    this._isLoggingForWebPerformance = isLoggingForWebPerformance === true;\n  }\n  addTimespan(key, startTime, endTime, startExtras, endExtras) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: addTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: Attempting to add a timespan that already exists ', key);\n      }\n      return;\n    }\n    this._timespans[key] = {\n      startTime,\n      endTime,\n      totalTime: endTime - (startTime || 0),\n      startExtras,\n      endExtras\n    };\n    if (this._isLoggingForWebPerformance) {\n      performance.measure(`${WEB_PERFORMANCE_PREFIX}_${key}`, {\n        start: startTime,\n        end: endTime\n      });\n    }\n  }\n  append(performanceLogger) {\n    this._timespans = Object.assign({}, performanceLogger.getTimespans(), this._timespans);\n    this._extras = Object.assign({}, performanceLogger.getExtras(), this._extras);\n    this._points = Object.assign({}, performanceLogger.getPoints(), this._points);\n    this._pointExtras = Object.assign({}, performanceLogger.getPointExtras(), this._pointExtras);\n  }\n  clear() {\n    this._timespans = {};\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clear');\n    }\n  }\n  clearCompleted() {\n    for (const key in this._timespans) {\n      if (this._timespans[key]?.totalTime != null) {\n        delete this._timespans[key];\n      }\n    }\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clearCompleted');\n    }\n  }\n  close() {\n    this._closed = true;\n  }\n  currentTimestamp() {\n    return getCurrentTimestamp();\n  }\n  getExtras() {\n    return this._extras;\n  }\n  getPoints() {\n    return this._points;\n  }\n  getPointExtras() {\n    return this._pointExtras;\n  }\n  getTimespans() {\n    return this._timespans;\n  }\n  hasTimespan(key) {\n    return !!this._timespans[key];\n  }\n  isClosed() {\n    return this._closed;\n  }\n  logEverything() {\n    if (PRINT_TO_CONSOLE) {\n      for (const key in this._timespans) {\n        if (this._timespans[key]?.totalTime != null) {\n          infoLog(key + ': ' + this._timespans[key].totalTime + 'ms');\n        }\n      }\n      infoLog(this._extras);\n      for (const key in this._points) {\n        if (this._points[key] != null) {\n          infoLog(key + ': ' + this._points[key] + 'ms');\n        }\n      }\n    }\n  }\n  markPoint(key, timestamp = getCurrentTimestamp(), extras) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: markPoint - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._points[key] != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: Attempting to mark a point that has been already logged ', key);\n      }\n      return;\n    }\n    this._points[key] = timestamp;\n    if (extras) {\n      this._pointExtras[key] = extras;\n    }\n    if (this._isLoggingForWebPerformance) {\n      performance.mark(`${WEB_PERFORMANCE_PREFIX}_${key}`, {\n        startTime: timestamp\n      });\n    }\n  }\n  removeExtra(key) {\n    const value = this._extras[key];\n    delete this._extras[key];\n    return value;\n  }\n  setExtra(key, value) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: setExtra - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._extras.hasOwnProperty(key)) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: Attempting to set an extra that already exists ', {\n          key,\n          currentValue: this._extras[key],\n          attemptedValue: value\n        });\n      }\n      return;\n    }\n    this._extras[key] = value;\n  }\n  startTimespan(key, timestamp = getCurrentTimestamp(), extras) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: startTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: Attempting to start a timespan that already exists ', key);\n      }\n      return;\n    }\n    this._timespans[key] = {\n      startTime: timestamp,\n      startExtras: extras\n    };\n    _cookies[key] = Systrace.beginAsyncEvent(key);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'start: ' + key);\n    }\n    if (this._isLoggingForWebPerformance) {\n      performance.mark(`${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`, {\n        startTime: timestamp\n      });\n    }\n  }\n  stopTimespan(key, timestamp = getCurrentTimestamp(), extras) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: stopTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n    const timespan = this._timespans[key];\n    if (!timespan || timespan.startTime == null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: Attempting to end a timespan that has not started ', key);\n      }\n      return;\n    }\n    if (timespan.endTime != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: Attempting to end a timespan that has already ended ', key);\n      }\n      return;\n    }\n    timespan.endExtras = extras;\n    timespan.endTime = timestamp;\n    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'end: ' + key);\n    }\n    if (_cookies[key] != null) {\n      Systrace.endAsyncEvent(key, _cookies[key]);\n      delete _cookies[key];\n    }\n    if (this._isLoggingForWebPerformance) {\n      performance.measure(`${WEB_PERFORMANCE_PREFIX}_${key}`, {\n        start: `${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`,\n        end: timestamp\n      });\n    }\n  }\n}\nexport default function createPerformanceLogger(isLoggingForWebPerformance) {\n  return new PerformanceLogger(isLoggingForWebPerformance);\n}","map":{"version":3,"names":["Systrace","Performance","infoLog","_cookies","PRINT_TO_CONSOLE","WEB_PERFORMANCE_PREFIX","performance","getCurrentTimestamp","global","nativeQPLTimestamp","now","bind","PerformanceLogger","_timespans","_extras","_points","_pointExtras","_closed","_isLoggingForWebPerformance","constructor","isLoggingForWebPerformance","addTimespan","key","startTime","endTime","startExtras","endExtras","__DEV__","totalTime","measure","start","end","append","performanceLogger","Object","assign","getTimespans","getExtras","getPoints","getPointExtras","clear","clearCompleted","close","currentTimestamp","hasTimespan","isClosed","logEverything","markPoint","timestamp","extras","mark","removeExtra","value","setExtra","hasOwnProperty","currentValue","attemptedValue","startTimespan","beginAsyncEvent","stopTimespan","timespan","endAsyncEvent","createPerformanceLogger"],"sources":["C:/Users/Dhrumil/VS Code/projectdemo/src/node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {\n  Extras,\n  ExtraValue,\n  IPerformanceLogger,\n  Timespan,\n} from './IPerformanceLogger';\n\nimport * as Systrace from '../Performance/Systrace';\nimport Performance from '../WebPerformance/Performance';\nimport infoLog from './infoLog';\n\nconst _cookies: {[key: string]: number, ...} = {};\n\nconst PRINT_TO_CONSOLE: false = false; // Type as false to prevent accidentally committing `true`;\n\n// This is the prefix for optional logging points/timespans as marks/measures via Performance API,\n// used to separate these internally from other marks/measures\nconst WEB_PERFORMANCE_PREFIX = 'global_perf_';\n\n// TODO: Remove once T143070419 is done\nconst performance = new Performance();\n\nexport const getCurrentTimestamp: () => number =\n  global.nativeQPLTimestamp ?? global.performance.now.bind(global.performance);\n\nclass PerformanceLogger implements IPerformanceLogger {\n  _timespans: {[key: string]: ?Timespan} = {};\n  _extras: {[key: string]: ?ExtraValue} = {};\n  _points: {[key: string]: ?number} = {};\n  _pointExtras: {[key: string]: ?Extras, ...} = {};\n  _closed: boolean = false;\n  _isLoggingForWebPerformance: boolean = false;\n\n  constructor(isLoggingForWebPerformance?: boolean) {\n    this._isLoggingForWebPerformance = isLoggingForWebPerformance === true;\n  }\n\n  addTimespan(\n    key: string,\n    startTime: number,\n    endTime: number,\n    startExtras?: Extras,\n    endExtras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: addTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to add a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    this._timespans[key] = {\n      startTime,\n      endTime,\n      totalTime: endTime - (startTime || 0),\n      startExtras,\n      endExtras,\n    };\n\n    if (this._isLoggingForWebPerformance) {\n      performance.measure(`${WEB_PERFORMANCE_PREFIX}_${key}`, {\n        start: startTime,\n        end: endTime,\n      });\n    }\n  }\n\n  append(performanceLogger: IPerformanceLogger) {\n    this._timespans = {\n      ...performanceLogger.getTimespans(),\n      ...this._timespans,\n    };\n    this._extras = {...performanceLogger.getExtras(), ...this._extras};\n    this._points = {...performanceLogger.getPoints(), ...this._points};\n    this._pointExtras = {\n      ...performanceLogger.getPointExtras(),\n      ...this._pointExtras,\n    };\n  }\n\n  clear() {\n    this._timespans = {};\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clear');\n    }\n  }\n\n  clearCompleted() {\n    for (const key in this._timespans) {\n      if (this._timespans[key]?.totalTime != null) {\n        delete this._timespans[key];\n      }\n    }\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clearCompleted');\n    }\n  }\n\n  close() {\n    this._closed = true;\n  }\n\n  currentTimestamp(): number {\n    return getCurrentTimestamp();\n  }\n\n  getExtras(): {[key: string]: ?ExtraValue} {\n    return this._extras;\n  }\n\n  getPoints(): {[key: string]: ?number} {\n    return this._points;\n  }\n\n  getPointExtras(): {[key: string]: ?Extras} {\n    return this._pointExtras;\n  }\n\n  getTimespans(): {[key: string]: ?Timespan} {\n    return this._timespans;\n  }\n\n  hasTimespan(key: string): boolean {\n    return !!this._timespans[key];\n  }\n\n  isClosed(): boolean {\n    return this._closed;\n  }\n\n  logEverything() {\n    if (PRINT_TO_CONSOLE) {\n      // log timespans\n      for (const key in this._timespans) {\n        if (this._timespans[key]?.totalTime != null) {\n          infoLog(key + ': ' + this._timespans[key].totalTime + 'ms');\n        }\n      }\n\n      // log extras\n      infoLog(this._extras);\n\n      // log points\n      for (const key in this._points) {\n        if (this._points[key] != null) {\n          infoLog(key + ': ' + this._points[key] + 'ms');\n        }\n      }\n    }\n  }\n\n  markPoint(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: markPoint - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._points[key] != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to mark a point that has been already logged ',\n          key,\n        );\n      }\n      return;\n    }\n    this._points[key] = timestamp;\n    if (extras) {\n      this._pointExtras[key] = extras;\n    }\n\n    if (this._isLoggingForWebPerformance) {\n      performance.mark(`${WEB_PERFORMANCE_PREFIX}_${key}`, {\n        startTime: timestamp,\n      });\n    }\n  }\n\n  removeExtra(key: string): ?ExtraValue {\n    const value = this._extras[key];\n    delete this._extras[key];\n    return value;\n  }\n\n  setExtra(key: string, value: ExtraValue) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: setExtra - has closed ignoring: ', key);\n      }\n      return;\n    }\n\n    if (this._extras.hasOwnProperty(key)) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to set an extra that already exists ',\n          {key, currentValue: this._extras[key], attemptedValue: value},\n        );\n      }\n      return;\n    }\n    this._extras[key] = value;\n  }\n\n  startTimespan(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: startTimespan - has closed ignoring: ',\n          key,\n        );\n      }\n      return;\n    }\n\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to start a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    this._timespans[key] = {\n      startTime: timestamp,\n      startExtras: extras,\n    };\n    _cookies[key] = Systrace.beginAsyncEvent(key);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'start: ' + key);\n    }\n\n    if (this._isLoggingForWebPerformance) {\n      performance.mark(`${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`, {\n        startTime: timestamp,\n      });\n    }\n  }\n\n  stopTimespan(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: stopTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n\n    const timespan = this._timespans[key];\n    if (!timespan || timespan.startTime == null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has not started ',\n          key,\n        );\n      }\n      return;\n    }\n    if (timespan.endTime != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has already ended ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespan.endExtras = extras;\n    timespan.endTime = timestamp;\n    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'end: ' + key);\n    }\n\n    if (_cookies[key] != null) {\n      Systrace.endAsyncEvent(key, _cookies[key]);\n      delete _cookies[key];\n    }\n\n    if (this._isLoggingForWebPerformance) {\n      performance.measure(`${WEB_PERFORMANCE_PREFIX}_${key}`, {\n        start: `${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`,\n        end: timestamp,\n      });\n    }\n  }\n}\n\n// Re-exporting for backwards compatibility with all the clients that\n// may still import it from this module.\nexport type {Extras, ExtraValue, IPerformanceLogger, Timespan};\n\n/**\n * This function creates performance loggers that can be used to collect and log\n * various performance data such as timespans, points and extras.\n * The loggers need to have minimal overhead since they're used in production.\n */\nexport default function createPerformanceLogger(\n  isLoggingForWebPerformance?: boolean,\n): IPerformanceLogger {\n  return new PerformanceLogger(isLoggingForWebPerformance);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}