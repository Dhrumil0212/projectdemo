{"ast":null,"code":"import warnOnce from '../Utilities/warnOnce';\nimport EventCounts from './EventCounts';\nimport MemoryInfo from './MemoryInfo';\nimport NativePerformance from './NativePerformance';\nimport NativePerformanceObserver from './NativePerformanceObserver';\nimport { PerformanceEntry } from './PerformanceEntry';\nimport { warnNoNativePerformanceObserver } from './PerformanceObserver';\nimport { performanceEntryTypeToRaw, rawToPerformanceEntry } from './RawPerformanceEntry';\nimport { RawPerformanceEntryTypeValues } from './RawPerformanceEntry';\nimport ReactNativeStartupTiming from './ReactNativeStartupTiming';\nconst getCurrentTimeStamp = global.nativePerformanceNow ? global.nativePerformanceNow : () => Date.now();\nexport class PerformanceMark extends PerformanceEntry {\n  constructor(markName, markOptions) {\n    super({\n      name: markName,\n      entryType: 'mark',\n      startTime: markOptions?.startTime ?? getCurrentTimeStamp(),\n      duration: 0\n    });\n    if (markOptions) {\n      this.detail = markOptions.detail;\n    }\n  }\n}\nexport class PerformanceMeasure extends PerformanceEntry {\n  constructor(measureName, measureOptions) {\n    super({\n      name: measureName,\n      entryType: 'measure',\n      startTime: 0,\n      duration: measureOptions?.duration ?? 0\n    });\n    if (measureOptions) {\n      this.detail = measureOptions.detail;\n    }\n  }\n}\nfunction warnNoNativePerformance() {\n  warnOnce('missing-native-performance', 'Missing native implementation of Performance');\n}\nexport default class Performance {\n  eventCounts = new EventCounts();\n  get memory() {\n    if (NativePerformance?.getSimpleMemoryInfo) {\n      const memoryInfo = NativePerformance.getSimpleMemoryInfo();\n      if (memoryInfo.hasOwnProperty('hermes_heapSize')) {\n        const {\n          hermes_heapSize: totalJSHeapSize,\n          hermes_allocatedBytes: usedJSHeapSize\n        } = memoryInfo;\n        return new MemoryInfo({\n          jsHeapSizeLimit: null,\n          totalJSHeapSize,\n          usedJSHeapSize\n        });\n      } else {\n        return new MemoryInfo();\n      }\n    }\n    return new MemoryInfo();\n  }\n  get reactNativeStartupTiming() {\n    if (NativePerformance?.getReactNativeStartupTiming) {\n      return new ReactNativeStartupTiming(NativePerformance.getReactNativeStartupTiming());\n    }\n    return new ReactNativeStartupTiming();\n  }\n  mark(markName, markOptions) {\n    const mark = new PerformanceMark(markName, markOptions);\n    if (NativePerformance?.mark) {\n      NativePerformance.mark(markName, mark.startTime, mark.duration);\n    } else {\n      warnNoNativePerformance();\n    }\n    return mark;\n  }\n  clearMarks(markName) {\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return;\n    }\n    NativePerformanceObserver?.clearEntries(RawPerformanceEntryTypeValues.MARK, markName);\n  }\n  measure(measureName, startMarkOrOptions, endMark) {\n    let options;\n    let startMarkName,\n      endMarkName = endMark,\n      duration,\n      startTime = 0,\n      endTime = 0;\n    if (typeof startMarkOrOptions === 'string') {\n      startMarkName = startMarkOrOptions;\n    } else if (startMarkOrOptions !== undefined) {\n      options = startMarkOrOptions;\n      if (endMark !== undefined) {\n        throw new TypeError(\"Performance.measure: Can't have both options and endMark\");\n      }\n      if (options.start === undefined && options.end === undefined) {\n        throw new TypeError('Performance.measure: Must have at least one of start/end specified in options');\n      }\n      if (options.start !== undefined && options.end !== undefined && options.duration !== undefined) {\n        throw new TypeError(\"Performance.measure: Can't have both start/end and duration explicitly in options\");\n      }\n      if (typeof options.start === 'number') {\n        startTime = options.start;\n      } else {\n        startMarkName = options.start;\n      }\n      if (typeof options.end === 'number') {\n        endTime = options.end;\n      } else {\n        endMarkName = options.end;\n      }\n      duration = options.duration ?? duration;\n    }\n    const measure = new PerformanceMeasure(measureName, options);\n    if (NativePerformance?.measure) {\n      NativePerformance.measure(measureName, startTime, endTime, duration, startMarkName, endMarkName);\n    } else {\n      warnNoNativePerformance();\n    }\n    return measure;\n  }\n  clearMeasures(measureName) {\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return;\n    }\n    NativePerformanceObserver?.clearEntries(RawPerformanceEntryTypeValues.MEASURE, measureName);\n  }\n  now() {\n    return getCurrentTimeStamp();\n  }\n  getEntries() {\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return [];\n    }\n    return NativePerformanceObserver.getEntries().map(rawToPerformanceEntry);\n  }\n  getEntriesByType(entryType) {\n    if (entryType !== 'mark' && entryType !== 'measure') {\n      console.log(`Performance.getEntriesByType: Only valid for 'mark' and 'measure' entry types, got ${entryType}`);\n      return [];\n    }\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return [];\n    }\n    return NativePerformanceObserver.getEntries(performanceEntryTypeToRaw(entryType)).map(rawToPerformanceEntry);\n  }\n  getEntriesByName(entryName, entryType) {\n    if (entryType !== undefined && entryType !== 'mark' && entryType !== 'measure') {\n      console.log(`Performance.getEntriesByName: Only valid for 'mark' and 'measure' entry types, got ${entryType}`);\n      return [];\n    }\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return [];\n    }\n    return NativePerformanceObserver.getEntries(entryType != null ? performanceEntryTypeToRaw(entryType) : undefined, entryName).map(rawToPerformanceEntry);\n  }\n}","map":{"version":3,"names":["warnOnce","EventCounts","MemoryInfo","NativePerformance","NativePerformanceObserver","PerformanceEntry","warnNoNativePerformanceObserver","performanceEntryTypeToRaw","rawToPerformanceEntry","RawPerformanceEntryTypeValues","ReactNativeStartupTiming","getCurrentTimeStamp","global","nativePerformanceNow","Date","now","PerformanceMark","constructor","markName","markOptions","name","entryType","startTime","duration","detail","PerformanceMeasure","measureName","measureOptions","warnNoNativePerformance","Performance","eventCounts","memory","getSimpleMemoryInfo","memoryInfo","hasOwnProperty","hermes_heapSize","totalJSHeapSize","hermes_allocatedBytes","usedJSHeapSize","jsHeapSizeLimit","reactNativeStartupTiming","getReactNativeStartupTiming","mark","clearMarks","clearEntries","MARK","measure","startMarkOrOptions","endMark","options","startMarkName","endMarkName","endTime","undefined","TypeError","start","end","clearMeasures","MEASURE","getEntries","map","getEntriesByType","console","log","getEntriesByName","entryName"],"sources":["C:/Users/Dhrumil/VS Code/projectdemo/src/node_modules/react-native/Libraries/WebPerformance/Performance.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n// flowlint unsafe-getters-setters:off\n\nimport type {HighResTimeStamp, PerformanceEntryType} from './PerformanceEntry';\nimport type {PerformanceEntryList} from './PerformanceObserver';\n\nimport warnOnce from '../Utilities/warnOnce';\nimport EventCounts from './EventCounts';\nimport MemoryInfo from './MemoryInfo';\nimport NativePerformance from './NativePerformance';\nimport NativePerformanceObserver from './NativePerformanceObserver';\nimport {PerformanceEntry} from './PerformanceEntry';\nimport {warnNoNativePerformanceObserver} from './PerformanceObserver';\nimport {\n  performanceEntryTypeToRaw,\n  rawToPerformanceEntry,\n} from './RawPerformanceEntry';\nimport {RawPerformanceEntryTypeValues} from './RawPerformanceEntry';\nimport ReactNativeStartupTiming from './ReactNativeStartupTiming';\n\ntype DetailType = mixed;\n\nexport type PerformanceMarkOptions = {\n  detail?: DetailType,\n  startTime?: HighResTimeStamp,\n};\n\ndeclare var global: {\n  // This value is defined directly via JSI, if available.\n  +nativePerformanceNow?: ?() => number,\n};\n\nconst getCurrentTimeStamp: () => HighResTimeStamp = global.nativePerformanceNow\n  ? global.nativePerformanceNow\n  : () => Date.now();\n\nexport class PerformanceMark extends PerformanceEntry {\n  detail: DetailType;\n\n  constructor(markName: string, markOptions?: PerformanceMarkOptions) {\n    super({\n      name: markName,\n      entryType: 'mark',\n      startTime: markOptions?.startTime ?? getCurrentTimeStamp(),\n      duration: 0,\n    });\n\n    if (markOptions) {\n      this.detail = markOptions.detail;\n    }\n  }\n}\n\nexport type TimeStampOrName = HighResTimeStamp | string;\n\nexport type PerformanceMeasureOptions = {\n  detail?: DetailType,\n  start?: TimeStampOrName,\n  end?: TimeStampOrName,\n  duration?: HighResTimeStamp,\n};\n\nexport class PerformanceMeasure extends PerformanceEntry {\n  detail: DetailType;\n\n  constructor(measureName: string, measureOptions?: PerformanceMeasureOptions) {\n    super({\n      name: measureName,\n      entryType: 'measure',\n      startTime: 0,\n      duration: measureOptions?.duration ?? 0,\n    });\n\n    if (measureOptions) {\n      this.detail = measureOptions.detail;\n    }\n  }\n}\n\nfunction warnNoNativePerformance() {\n  warnOnce(\n    'missing-native-performance',\n    'Missing native implementation of Performance',\n  );\n}\n\n/**\n * Partial implementation of the Performance interface for RN,\n * corresponding to the standard in\n * https://www.w3.org/TR/user-timing/#extensions-performance-interface\n */\nexport default class Performance {\n  eventCounts: EventCounts = new EventCounts();\n\n  // Get the current JS memory information.\n  get memory(): MemoryInfo {\n    if (NativePerformance?.getSimpleMemoryInfo) {\n      // JSI API implementations may have different variants of names for the JS\n      // heap information we need here. We will parse the result based on our\n      // guess of the implementation for now.\n      const memoryInfo = NativePerformance.getSimpleMemoryInfo();\n      if (memoryInfo.hasOwnProperty('hermes_heapSize')) {\n        // We got memory information from Hermes\n        const {\n          hermes_heapSize: totalJSHeapSize,\n          hermes_allocatedBytes: usedJSHeapSize,\n        } = memoryInfo;\n\n        return new MemoryInfo({\n          jsHeapSizeLimit: null, // We don't know the heap size limit from Hermes.\n          totalJSHeapSize,\n          usedJSHeapSize,\n        });\n      } else {\n        // JSC and V8 has no native implementations for memory information in JSI::Instrumentation\n        return new MemoryInfo();\n      }\n    }\n\n    return new MemoryInfo();\n  }\n\n  // Startup metrics is not used in web, but only in React Native.\n  get reactNativeStartupTiming(): ReactNativeStartupTiming {\n    if (NativePerformance?.getReactNativeStartupTiming) {\n      return new ReactNativeStartupTiming(\n        NativePerformance.getReactNativeStartupTiming(),\n      );\n    }\n    return new ReactNativeStartupTiming();\n  }\n\n  mark(\n    markName: string,\n    markOptions?: PerformanceMarkOptions,\n  ): PerformanceMark {\n    const mark = new PerformanceMark(markName, markOptions);\n\n    if (NativePerformance?.mark) {\n      NativePerformance.mark(markName, mark.startTime, mark.duration);\n    } else {\n      warnNoNativePerformance();\n    }\n\n    return mark;\n  }\n\n  clearMarks(markName?: string): void {\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return;\n    }\n\n    NativePerformanceObserver?.clearEntries(\n      RawPerformanceEntryTypeValues.MARK,\n      markName,\n    );\n  }\n\n  measure(\n    measureName: string,\n    startMarkOrOptions?: string | PerformanceMeasureOptions,\n    endMark?: string,\n  ): PerformanceMeasure {\n    let options;\n    let startMarkName,\n      endMarkName = endMark,\n      duration,\n      startTime = 0,\n      endTime = 0;\n\n    if (typeof startMarkOrOptions === 'string') {\n      startMarkName = startMarkOrOptions;\n    } else if (startMarkOrOptions !== undefined) {\n      options = startMarkOrOptions;\n      if (endMark !== undefined) {\n        throw new TypeError(\n          \"Performance.measure: Can't have both options and endMark\",\n        );\n      }\n      if (options.start === undefined && options.end === undefined) {\n        throw new TypeError(\n          'Performance.measure: Must have at least one of start/end specified in options',\n        );\n      }\n      if (\n        options.start !== undefined &&\n        options.end !== undefined &&\n        options.duration !== undefined\n      ) {\n        throw new TypeError(\n          \"Performance.measure: Can't have both start/end and duration explicitly in options\",\n        );\n      }\n\n      if (typeof options.start === 'number') {\n        startTime = options.start;\n      } else {\n        startMarkName = options.start;\n      }\n\n      if (typeof options.end === 'number') {\n        endTime = options.end;\n      } else {\n        endMarkName = options.end;\n      }\n\n      duration = options.duration ?? duration;\n    }\n\n    const measure = new PerformanceMeasure(measureName, options);\n\n    if (NativePerformance?.measure) {\n      NativePerformance.measure(\n        measureName,\n        startTime,\n        endTime,\n        duration,\n        startMarkName,\n        endMarkName,\n      );\n    } else {\n      warnNoNativePerformance();\n    }\n\n    return measure;\n  }\n\n  clearMeasures(measureName?: string): void {\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return;\n    }\n\n    NativePerformanceObserver?.clearEntries(\n      RawPerformanceEntryTypeValues.MEASURE,\n      measureName,\n    );\n  }\n\n  /**\n   * Returns a double, measured in milliseconds.\n   * https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\n   */\n  now(): HighResTimeStamp {\n    return getCurrentTimeStamp();\n  }\n\n  /**\n   * An extension that allows to get back to JS all currently logged marks/measures\n   * (in our case, be it from JS or native), see\n   * https://www.w3.org/TR/performance-timeline/#extensions-to-the-performance-interface\n   */\n  getEntries(): PerformanceEntryList {\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return [];\n    }\n    return NativePerformanceObserver.getEntries().map(rawToPerformanceEntry);\n  }\n\n  getEntriesByType(entryType: PerformanceEntryType): PerformanceEntryList {\n    if (entryType !== 'mark' && entryType !== 'measure') {\n      console.log(\n        `Performance.getEntriesByType: Only valid for 'mark' and 'measure' entry types, got ${entryType}`,\n      );\n      return [];\n    }\n\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return [];\n    }\n    return NativePerformanceObserver.getEntries(\n      performanceEntryTypeToRaw(entryType),\n    ).map(rawToPerformanceEntry);\n  }\n\n  getEntriesByName(\n    entryName: string,\n    entryType?: PerformanceEntryType,\n  ): PerformanceEntryList {\n    if (\n      entryType !== undefined &&\n      entryType !== 'mark' &&\n      entryType !== 'measure'\n    ) {\n      console.log(\n        `Performance.getEntriesByName: Only valid for 'mark' and 'measure' entry types, got ${entryType}`,\n      );\n      return [];\n    }\n\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return [];\n    }\n    return NativePerformanceObserver.getEntries(\n      entryType != null ? performanceEntryTypeToRaw(entryType) : undefined,\n      entryName,\n    ).map(rawToPerformanceEntry);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}