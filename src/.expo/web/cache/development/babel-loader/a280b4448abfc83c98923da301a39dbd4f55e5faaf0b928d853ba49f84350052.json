{"ast":null,"code":"'use strict';\n\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nlet startNativeAnimationNextId = 1;\nexport default class Animation {\n  start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}\n  stop() {\n    if (this.__nativeId) {\n      NativeAnimatedHelper.API.stopAnimation(this.__nativeId);\n    }\n  }\n  __getNativeAnimationConfig() {\n    throw new Error('This animation type cannot be offloaded to native');\n  }\n  __debouncedOnEnd(result) {\n    const onEnd = this.__onEnd;\n    this.__onEnd = null;\n    onEnd && onEnd(result);\n  }\n  __startNativeAnimation(animatedValue) {\n    const startNativeAnimationWaitId = `${startNativeAnimationNextId}:startAnimation`;\n    startNativeAnimationNextId += 1;\n    NativeAnimatedHelper.API.setWaitingForIdentifier(startNativeAnimationWaitId);\n    try {\n      const config = this.__getNativeAnimationConfig();\n      animatedValue.__makeNative(config.platformConfig);\n      this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();\n      NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), config, this.__debouncedOnEnd.bind(this));\n    } catch (e) {\n      throw e;\n    } finally {\n      NativeAnimatedHelper.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);\n    }\n  }\n}","map":{"version":3,"names":["NativeAnimatedHelper","startNativeAnimationNextId","Animation","start","fromValue","onUpdate","onEnd","previousAnimation","animatedValue","stop","__nativeId","API","stopAnimation","__getNativeAnimationConfig","Error","__debouncedOnEnd","result","__onEnd","__startNativeAnimation","startNativeAnimationWaitId","setWaitingForIdentifier","config","__makeNative","platformConfig","generateNewAnimationId","startAnimatingNode","__getNativeTag","bind","e","unsetWaitingForIdentifier"],"sources":["C:/Users/Dhrumil/VS Code/projectdemo/src/node_modules/react-native/Libraries/Animated/animations/Animation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {PlatformConfig} from '../AnimatedPlatformConfig';\nimport type AnimatedValue from '../nodes/AnimatedValue';\n\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\n\nexport type EndResult = {finished: boolean, ...};\nexport type EndCallback = (result: EndResult) => void;\n\nexport type AnimationConfig = {\n  isInteraction?: boolean,\n  useNativeDriver: boolean,\n  platformConfig?: PlatformConfig,\n  onComplete?: ?EndCallback,\n  iterations?: number,\n};\n\nlet startNativeAnimationNextId = 1;\n\n// Important note: start() and stop() will only be called at most once.\n// Once an animation has been stopped or finished its course, it will\n// not be reused.\nexport default class Animation {\n  __active: boolean;\n  __isInteraction: boolean;\n  __nativeId: number;\n  __onEnd: ?EndCallback;\n  __iterations: number;\n  start(\n    fromValue: number,\n    onUpdate: (value: number) => void,\n    onEnd: ?EndCallback,\n    previousAnimation: ?Animation,\n    animatedValue: AnimatedValue,\n  ): void {}\n  stop(): void {\n    if (this.__nativeId) {\n      NativeAnimatedHelper.API.stopAnimation(this.__nativeId);\n    }\n  }\n  __getNativeAnimationConfig(): any {\n    // Subclasses that have corresponding animation implementation done in native\n    // should override this method\n    throw new Error('This animation type cannot be offloaded to native');\n  }\n  // Helper function for subclasses to make sure onEnd is only called once.\n  __debouncedOnEnd(result: EndResult): void {\n    const onEnd = this.__onEnd;\n    this.__onEnd = null;\n    onEnd && onEnd(result);\n  }\n  __startNativeAnimation(animatedValue: AnimatedValue): void {\n    const startNativeAnimationWaitId = `${startNativeAnimationNextId}:startAnimation`;\n    startNativeAnimationNextId += 1;\n    NativeAnimatedHelper.API.setWaitingForIdentifier(\n      startNativeAnimationWaitId,\n    );\n    try {\n      const config = this.__getNativeAnimationConfig();\n      animatedValue.__makeNative(config.platformConfig);\n      this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();\n      NativeAnimatedHelper.API.startAnimatingNode(\n        this.__nativeId,\n        animatedValue.__getNativeTag(),\n        config,\n        // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n        this.__debouncedOnEnd.bind(this),\n      );\n    } catch (e) {\n      throw e;\n    } finally {\n      NativeAnimatedHelper.API.unsetWaitingForIdentifier(\n        startNativeAnimationWaitId,\n      );\n    }\n  }\n}\n"],"mappings":"AAUA,YAAY;;AAKZ,OAAOA,oBAAoB,MAAM,yBAAyB;AAa1D,IAAIC,0BAA0B,GAAG,CAAC;AAKlC,eAAe,MAAMC,SAAS,CAAC;EAM7BC,KAAKA,CACHC,SAAiB,EACjBC,QAAiC,EACjCC,KAAmB,EACnBC,iBAA6B,EAC7BC,aAA4B,EACtB,CAAC;EACTC,IAAIA,CAAA,EAAS;IACX,IAAI,IAAI,CAACC,UAAU,EAAE;MACnBV,oBAAoB,CAACW,GAAG,CAACC,aAAa,CAAC,IAAI,CAACF,UAAU,CAAC;IACzD;EACF;EACAG,0BAA0BA,CAAA,EAAQ;IAGhC,MAAM,IAAIC,KAAK,CAAC,mDAAmD,CAAC;EACtE;EAEAC,gBAAgBA,CAACC,MAAiB,EAAQ;IACxC,MAAMV,KAAK,GAAG,IAAI,CAACW,OAAO;IAC1B,IAAI,CAACA,OAAO,GAAG,IAAI;IACnBX,KAAK,IAAIA,KAAK,CAACU,MAAM,CAAC;EACxB;EACAE,sBAAsBA,CAACV,aAA4B,EAAQ;IACzD,MAAMW,0BAA0B,GAAG,GAAGlB,0BAA0B,iBAAiB;IACjFA,0BAA0B,IAAI,CAAC;IAC/BD,oBAAoB,CAACW,GAAG,CAACS,uBAAuB,CAC9CD,0BACF,CAAC;IACD,IAAI;MACF,MAAME,MAAM,GAAG,IAAI,CAACR,0BAA0B,CAAC,CAAC;MAChDL,aAAa,CAACc,YAAY,CAACD,MAAM,CAACE,cAAc,CAAC;MACjD,IAAI,CAACb,UAAU,GAAGV,oBAAoB,CAACwB,sBAAsB,CAAC,CAAC;MAC/DxB,oBAAoB,CAACW,GAAG,CAACc,kBAAkB,CACzC,IAAI,CAACf,UAAU,EACfF,aAAa,CAACkB,cAAc,CAAC,CAAC,EAC9BL,MAAM,EAEN,IAAI,CAACN,gBAAgB,CAACY,IAAI,CAAC,IAAI,CACjC,CAAC;IACH,CAAC,CAAC,OAAOC,CAAC,EAAE;MACV,MAAMA,CAAC;IACT,CAAC,SAAS;MACR5B,oBAAoB,CAACW,GAAG,CAACkB,yBAAyB,CAChDV,0BACF,CAAC;IACH;EACF;AACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}